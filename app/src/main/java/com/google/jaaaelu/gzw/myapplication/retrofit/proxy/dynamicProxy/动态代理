优势：
无侵入式，再不修改原来代码情况下，增加一些方法或功能，在方法的执行前后添加自己逻辑

动态代理：
代理类在程序运行时创建的代理方式，代理类并不是在 Java 代码中定义的，而是在运行时，根据在 Java 代码中
配置动态生成的，相比于静态代理，优势在于能够很方便的对于代理类的函数进行统一处理，而不用频繁的去修改
每一个代理类的函数

两种写法：
1.JDK 动态代理（通过反射），但是它只能为接口创建代理，而静态代码可以为抽象类创建代理
2.CGLIB

//  下面都是 JDK 动态代理

InvocationHandler
1.每个代理类的对象都会关联一个表示内部处理逻辑的 InvocationHandler 接口的实现，调用信息会被传递到
InvocationHandler 的 invoke(...)
2.invoke 方法的参数中可以获取我们所需要的代理对象以及方法对应的 Method 对象和对应参数
3.invoke 方法的返回值被返回给使用者，什么意思呢？表明对方法进行了拦截，过程对用用户来说透明的

简单过程
调用 Proxy.newProxyInstance(...) 时，它会根据我们传递进来的 Class 对象，来生成一个对象 A，也就是代理
类，每当代理对象类 A 执行某个方法的时候，它就会调用我们第三个参数的 InvocationHandler 里面的 invoke(...)，
在这个方法中你可以执行相应的操作

动态代理总结：
1.运行期，动态代理是通过代理类与相关接口不发生联系的情况下，而在运行时实现动态管理
2.InvocationHandler 接口和反射包中 Proxy 类
3.动态代理与静态代理最大的不同，动态代理的代理类不需要手动生成，该代理类根据配置是运行期间动态生成的