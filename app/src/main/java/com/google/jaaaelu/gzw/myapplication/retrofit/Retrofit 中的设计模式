1.构建者模式
- 用于将一个复杂对象的构建与表示相分离，创建对象时候的复杂逻辑其实用户并不用知道，只需要链式调用即可
- 否则你可能需要通过不同的构造来完成不同场景的对象创建，而构造太多的话会带来一定困扰
- 你只需要调用不同方法就能创建出表达不同意义的对象

2.工厂方法
- 如RxJava2CallAdapterFactory，实现了 CallAdapter 中 Factory，然后重写对应的 get 方法获取对应的对象

3.外观模式（也叫门面）
- 外部有一个子系统的通信必须通过一个统一的外观对象（也就是门面）来进行，门面的作用就是为子系统的一组
接口提供一个一致的界面，外观模式就是定义了一个这样的高层接口，通过调用高层接口，可以让我们的外部和子
系统的通信变得更加容易，比如 Android Studio 点击进行的时候，点击这个按钮，就可以把 App 安装打手机上，
而 Android Studio 为我们做了一系列复杂的事情，而这些过程我们是可以不用关心的，它通过给我们提供这个运
行的接口，让我们客户端来完成各种子系统之间的协调工作，我们就是通过这个按钮和 Android Studio 当中内部
的那些子系统来进行工作
- Retrofit 类中那些成员变量就是子系统，Retrofit 就是外观类，我们不会去直接那些子系统，而是通过这个外、
观类来和它们进行交互

4.策略模式
- 比如我们平时要完成一项任务，这时候你有很多中不同的方法来完成它，每一种方法也就被成为一个策略，我们
可以环境或者条件的不同选择不同的策略（方法）
- 在 CallAdapter 就用到了策略模式
- 工厂模式强调生产不同的类型，而策略模式强调的不同策略的具体实现

5.适配器模式
- 将一个接口转为客户端希望的另外一个接口，使这个接口本不兼容的类可以在一起工作
- 在 CallAdapter 就用到了适配器模式

6.观察者模式
- 建立对象与多个对象之间的关系，当一个对象发生变化的时候，会自动通知其他观察它的对象，这时候就有了被
观察者和观察者之前的区分了，这是一个一对多的关系，一个被观察者可以对应多个观察者，好处也在于多个观察
者之间是没有相互联系的
- 异步的网络请求回调就用到了观察者模式